<!DOCTYPE html>
<html lang="fi" xmlns="http://www.w3.org/1999/xhtml" xml:lang="fi">
    <head><!-- head-osan sisältöä ei saa muuttaa -->
        <script src="https://appro.mit.jyu.fi/tiea2120/vt/vt3/2021/data2021.js"></script>
        <script async="" type="module" src="vt3.js"></script>
        <link rel="StyleSheet" href="tyylit.css" type="text/css" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <meta charset="utf-8"/>
        <title>Tulospalvelu - 2021 syksy</title>
    </head>
    <body><!-- Tämän tiedoston sisältöä saa muuttaa vapaasti tästä kommentista eteenpäin
 Kirjoita mahdollisimman paljon valmista HTML-koodia ja luo javascriptilla dynaamisesti
 vain tarpeelliset kuten leimaustapojen ja sarjojen valinta sekä joukkuelistaus
  -->
       <h1>Tulospalvelu</h1>
	   <form id="form1" action="foobar.ei.toimi.example" method="post">
		<fieldset>
		   <legend>Joukkueen tiedot</legend>
		   <p>
			   <label class="vas" for="Joukkueen_nimi">Nimi</label>
			   <input class="inp1" id="Joukkueen_nimi" type="text" name="nimi" value=""></input>
		   </p>
		       <p class="oik">
                  <label for="2h">2h</label>
			      <input id="2h" type="radio" name="Joukkueen_sarja" value="2h" checked="checked"></input><br />
			      <label for="4h">4h</label>
			      <input id="4h" type="radio" name="Joukkueen_sarja" value="4h"></input><br />
			      <label for="8h">8h</label>
			      <input id="8h" type="radio" name="Joukkueen_sarja" value="8h"></input>
			   </p>
			   <div class="vas">Sarja
			   </div>
	   </fieldset>

	   <fieldset class="fsetti2">
		   <legend>Jäsenet</legend>
			<div>
			<label for="Joukkueen_jasen">Jäsen1</label>
			<input class="inp1" id="Joukkueen_jasen" type="text" name="nimi" value=""></input>
		    </div><br />

			<div>
			<label for="Joukkueen_jasen2">Jäsen2</label>
			<input class="inp1" id="Joukkueen_jasen2" type="text" name="nimi" value=""></input>
	    	</div>
	   </fieldset> 
       <input type="submit" name="tallenna" value="Tallenna"></input>
	   </form>
	   <ul id="ulli"></ul>

<!-- Tästä eteenpäin sivun sisältöä ei saa muuttaa -->
<!-- Sivun validoinnin voit tehdä milloin tahansa näppäinyhdistelmällä CTRL+ALT+V -->
<script src="https://appro.mit.jyu.fi/tools/htmlinspector/html-inspector.js"></script>
<script src="https://appro.mit.jyu.fi/tools/validator/validator.user.js"></script>
<script src="https://appro.mit.jyu.fi/tools/jshint/jshint.js"></script>
<script src="https://appro.mit.jyu.fi/tools/jshint/jshint.user.js"></script>
<script>
//<![CDATA[
// seurataan DOM-puuhun tehtyjä muutoksia. Validoidaan dokumentti, jos DOM-puuta
// muutetaan. Tämä hidastaa merkittävästi sovellusta, mutta auttaa bongaamaan
// epävalidit muutokset sivun rakenteeseen
// kts. https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver
function observe() {
	// asetukset
	const config = { attributes: true, childList: true, subtree: true };
        // ajastuksen apumuuttuja
        let timer = true;

	// seuraava funktio suoritetaan, jos dokumentin sisältö muuttuu
        function validointi() {
		HTMLInspector.inspect( {
        		domRoot: "html",
        		useRules: null,
		         excludeRules: ["script-placement","unnecessary-elements"],
        		excludeElements: "svg",
        		excludeSubTrees: ["svg","iframe"],
        		onComplete: function(errors) {
                		errors.forEach(function(error) {
                        	console.warn(error.message, error.context);
                		});

		        }
        	} );

                timer = true;
        }

	// muutosten seuranta
	const callback = function(mutationsList, observer) {
	    for(let mutation of mutationsList) {
	        if (timer && ( mutation.type === 'childList' || mutation.type === 'attributes') ) {
		  // emme halua suorittaa validointia jokaisen pienen muutoksen
		  // jälkeen joten ajetaan validointia viivästettynä, jotta mahdollisia
		  // muutoksia ehtii tulla enemmän kerralla
		    window.setTimeout(  validointi, 500 );
                    timer = false;
//	            console.log(mutation);
	        }
	    }
	};

	// luodaan varsinainen tapahtumankuuntelija 
	const observer = new MutationObserver(callback);

	// aktivoidaan kuuntelija dokumentin body-elementille
	observer.observe(document.body, config);
}
window.addEventListener("load", observe);
//]]>
</script>
</body>
</html>
